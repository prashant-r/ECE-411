-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - ravi7.ews (linux-a2.ews.illinois.edu)
--          at - 15:16:51 01/08/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel : IN     std_logic;
      ALUop     : IN     LC3b_aluop;
      DATAIN    : IN     LC3b_word;
      LoadIR    : IN     std_logic;
      LoadMAR   : IN     std_logic;
      LoadMDR   : IN     std_logic;
      LoadNZP   : IN     std_logic;
      LoadPC    : IN     std_logic;
      MARMuxSel : IN     std_logic;
      MDRMuxSel : IN     std_logic;
      PCMuxSel  : IN     std_logic;
      RESET_L   : IN     std_logic;
      RFMuxSel  : IN     std_logic;
      RegWrite  : IN     std_logic;
      StoreSR   : IN     std_logic;
      clk       : IN     std_logic;
      ADDRESS   : OUT    LC3b_word;
      CheckN    : OUT    std_logic;
      CheckP    : OUT    std_logic;
      CheckZ    : OUT    std_logic;
      DATAOUT   : OUT    LC3b_word;
      Opcode    : OUT    LC3b_opcode;
      n         : OUT    std_logic;
      p         : OUT    std_logic;
      z         : OUT    std_logic
   );

-- Declarations

-- Template for Synopsys DC constraints
-- pragma dc_script_begin
--
-- pragma dc_script_end
--
-- VHDL Attribute Template
--attribute <name> of <object> : <class> is <value>;
END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - ravi7.ews (linux-a2.ews.illinois.edu)
--          at - 15:16:51 01/08/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDRout      : LC3b_word;
   SIGNAL PCMuxout    : LC3b_word;
   SIGNAL PCPlus2out  : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxout    : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxOut : LC3b_reg;
   SIGNAL dest        : LC3b_reg;
   SIGNAL index6      : LC3b_index6;
   SIGNAL offset9     : LC3b_offset9;


   -- Component Declarations
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR  : IN     std_logic ;
      MDRout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      Opcode  : OUT    LC3b_opcode ;
      SrcA    : OUT    LC3b_reg ;
      SrcB    : OUT    LC3b_reg ;
      dest    : OUT    LC3b_reg ;
      index6  : OUT    LC3b_index6 ;
      offset9 : OUT    LC3b_offset9 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      input  : IN     LC3b_word ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxOut : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      StoreMuxOut : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- DATAOUT=MDRout
   DATAOUT <= MDRout;  \gghkjgh
   jhjgjgj                                  


   -- Instance port mappings.
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   U_3 : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         BRaddout => BRaddout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR  => LoadIR,
         MDRout  => MDRout,
         clk     => clk,
         Opcode  => Opcode,
         SrcA    => SrcA,
         SrcB    => SrcB,
         dest    => dest,
         index6  => index6,
         offset9 => offset9
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => MARMuxout,
         load   => LoadMAR,
         Output => ADDRESS
      );
   PC : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => PCMuxout,
         load   => LoadPC,
         Output => PCout
      );
   U_1 : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => MDRMuxout,
         load   => LoadMDR,
         Output => MDRout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxOut => StoreMuxOut,
         clk         => clk,
         dest        => dest,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         dest        => dest,
         StoreMuxOut => StoreMuxOut
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => ADJ6out,
         Sel => ALUMuxSel,
         F   => ALUMuxout
      );
   MARMux : WordMux2
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   PCMuz : WordMux2
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   U_0 : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   U_2 : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => ALUout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );

END struct;
