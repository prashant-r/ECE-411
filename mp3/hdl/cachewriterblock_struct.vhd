-- VHDL Entity ece411.CacheWriterBlock.symbol
--
-- Created:
--          by - ravi7.ews (siebl-0220-20.ews.illinois.edu)
--          at - 13:23:25 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY CacheWriterBlock IS
   PORT( 
      DataOut       : IN     LC3b_word;
      Line_data     : IN     LC3b_oword;
      MWRITEH_L     : IN     std_logic;
      mwritel_l     : IN     std_logic;
      offset        : IN     LC3b_c_offset;
      WriteBackData : OUT    lc3b_oword
   );

-- Declarations

END CacheWriterBlock ;

--
-- VHDL Architecture ece411.CacheWriterBlock.struct
--
-- Created:
--          by - ravi7.ews (siebl-0220-20.ews.illinois.edu)
--          at - 13:23:25 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF CacheWriterBlock IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F0   : LC3b_word;
   SIGNAL F1   : LC3b_word;
   SIGNAL F2   : LC3b_word;
   SIGNAL F3   : LC3b_word;
   SIGNAL F4   : LC3b_word;
   SIGNAL F5   : LC3b_word;
   SIGNAL F6   : LC3b_word;
   SIGNAL F7   : LC3b_word;
   SIGNAL Fa   : LC3b_word;
   SIGNAL Fb   : Lc3b_word;
   SIGNAL Fc   : LC3b_word;
   SIGNAL Fd   : LC3b_word;
   SIGNAL Fe   : LC3b_word;
   SIGNAL Ff   : Lc3b_word;
   SIGNAL Fg   : LC3b_word;
   SIGNAL Fh   : LC3b_word;
   SIGNAL Fout : LC3B_BYTE;
   SIGNAL is0  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is1  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is2  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is3  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is4  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is5  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is6  : std_logic_vector(3 DOWNTO 0);
   SIGNAL is7  : std_logic_vector(3 DOWNTO 0);
   SIGNAL off3 : std_logic_vector(2 DOWNTO 0);
   SIGNAL sig0 : std_logic;
   SIGNAL sig1 : std_logic;
   SIGNAL sig2 : std_logic;
   SIGNAL sig3 : std_logic;
   SIGNAL sig4 : std_logic;
   SIGNAL sig5 : std_logic;
   SIGNAL sig6 : std_logic;
   SIGNAL sig7 : std_logic;


   -- Component Declarations
   COMPONENT ChangeByIndex
   PORT (
      DataOut   : IN     LC3b_word ;
      F0        : IN     LC3b_word ;
      F1        : IN     LC3b_word ;
      F2        : IN     LC3b_word ;
      F3        : IN     LC3b_word ;
      F4        : IN     LC3b_word ;
      F5        : IN     LC3b_word ;
      F6        : IN     LC3b_word ;
      F7        : IN     LC3b_word ;
      MWRITEH_L : IN     std_logic ;
      mwritel_l : IN     std_logic ;
      sig0      : IN     std_logic ;
      sig1      : IN     std_logic ;
      sig2      : IN     std_logic ;
      sig3      : IN     std_logic ;
      sig4      : IN     std_logic ;
      sig5      : IN     std_logic ;
      sig6      : IN     std_logic ;
      sig7      : IN     std_logic ;
      Fa        : OUT    LC3b_word ;
      Fb        : OUT    Lc3b_word ;
      Fc        : OUT    LC3b_word ;
      Fd        : OUT    LC3b_word ;
      Fe        : OUT    LC3b_word ;
      Ff        : OUT    Lc3b_word ;
      Fg        : OUT    LC3b_word ;
      Fh        : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NumGen
   PORT (
      is0 : OUT    std_logic_vector (3 DOWNTO 0);
      is1 : OUT    std_logic_vector (3 DOWNTO 0);
      is2 : OUT    std_logic_vector (3 DOWNTO 0);
      is3 : OUT    std_logic_vector (3 DOWNTO 0);
      is4 : OUT    std_logic_vector (3 DOWNTO 0);
      is5 : OUT    std_logic_vector (3 DOWNTO 0);
      is6 : OUT    std_logic_vector (3 DOWNTO 0);
      is7 : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Offset3Bit
   PORT (
      offset : IN     LC3b_c_offset ;
      off3   : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT WhichWord
   PORT (
      Fout : IN     LC3B_BYTE ;
      sig0 : OUT    std_logic ;
      sig1 : OUT    std_logic ;
      sig2 : OUT    std_logic ;
      sig3 : OUT    std_logic ;
      sig4 : OUT    std_logic ;
      sig5 : OUT    std_logic ;
      sig6 : OUT    std_logic ;
      sig7 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT o_wordRipper
   PORT (
      A : IN     LC3b_oword ;
      B : IN     LC3b_c_offset ;
      F : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT oword_combiner
   PORT (
      Fa            : IN     LC3b_word ;
      Fb            : IN     Lc3b_word ;
      Fc            : IN     LC3b_word ;
      Fd            : IN     LC3b_word ;
      Fe            : IN     LC3b_word ;
      Ff            : IN     Lc3b_word ;
      Fg            : IN     LC3b_word ;
      Fh            : IN     LC3b_word ;
      WriteBackData : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT DECODE3_8
   PORT (
      A : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F : OUT    LC3B_BYTE 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ChangeByIndex USE ENTITY ece411.ChangeByIndex;
   FOR ALL : DECODE3_8 USE ENTITY mp3lib.DECODE3_8;
   FOR ALL : NumGen USE ENTITY ece411.NumGen;
   FOR ALL : Offset3Bit USE ENTITY ece411.Offset3Bit;
   FOR ALL : WhichWord USE ENTITY ece411.WhichWord;
   FOR ALL : o_wordRipper USE ENTITY ece411.o_wordRipper;
   FOR ALL : oword_combiner USE ENTITY ece411.oword_combiner;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_16 : ChangeByIndex
      PORT MAP (
         DataOut   => DataOut,
         F0        => F0,
         F1        => F1,
         F2        => F2,
         F3        => F3,
         F4        => F4,
         F5        => F5,
         F6        => F6,
         F7        => F7,
         MWRITEH_L => MWRITEH_L,
         mwritel_l => mwritel_l,
         sig0      => sig0,
         sig1      => sig1,
         sig2      => sig2,
         sig3      => sig3,
         sig4      => sig4,
         sig5      => sig5,
         sig6      => sig6,
         sig7      => sig7,
         Fa        => Fa,
         Fb        => Fb,
         Fc        => Fc,
         Fd        => Fd,
         Fe        => Fe,
         Ff        => Ff,
         Fg        => Fg,
         Fh        => Fh
      );
   U_1 : NumGen
      PORT MAP (
         is0 => is0,
         is1 => is1,
         is2 => is2,
         is3 => is3,
         is4 => is4,
         is5 => is5,
         is6 => is6,
         is7 => is7
      );
   U_18 : Offset3Bit
      PORT MAP (
         offset => offset,
         off3   => off3
      );
   U_19 : WhichWord
      PORT MAP (
         Fout => Fout,
         sig0 => sig0,
         sig1 => sig1,
         sig2 => sig2,
         sig3 => sig3,
         sig4 => sig4,
         sig5 => sig5,
         sig6 => sig6,
         sig7 => sig7
      );
   U_0 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is6,
         F => F6
      );
   U_9 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is2,
         F => F2
      );
   U_10 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is5,
         F => F5
      );
   U_11 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is1,
         F => F1
      );
   U_12 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is0,
         F => F0
      );
   U_13 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is4,
         F => F4
      );
   U_14 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is3,
         F => F3
      );
   U_15 : o_wordRipper
      PORT MAP (
         A => Line_data,
         B => is7,
         F => F7
      );
   FahCombiner : oword_combiner
      PORT MAP (
         Fa            => Fa,
         Fb            => Fb,
         Fc            => Fc,
         Fd            => Fd,
         Fe            => Fe,
         Ff            => Ff,
         Fg            => Fg,
         Fh            => Fh,
         WriteBackData => WriteBackData
      );
   U_17 : DECODE3_8
      PORT MAP (
         A => off3,
         F => Fout
      );

END struct;
