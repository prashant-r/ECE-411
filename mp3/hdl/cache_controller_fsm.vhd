-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 16:41:51 03/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      IsItDirty : IN     STD_LOGIC;
      Miss      : IN     std_logic;
      PMRESP_H  : IN     STD_LOGIC;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      LdOn      : OUT    std_logic;
      PMREAD_L  : OUT    STD_LOGIC;
      PMWRITE_L : OUT    STD_LOGIC;
      start_hit : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 16:41:51 03/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      start,
      CLOaD,
      CSToRe,
      Missed
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      CLK,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= start;
      ELSIF (CLK'EVENT AND CLK = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      IsItDirty,
      Miss,
      PMRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN start => 
            IF (miss = '1') THEN 
               next_state <= Missed;
            ELSE
               next_state <= start;
            END IF;
         WHEN CLOaD => 
            IF (PMRESP_H ='1') THEN 
               next_state <= start;
            ELSE
               next_state <= CLOaD;
            END IF;
         WHEN CSToRe => 
            IF (PMRESP_H = '1') THEN 
               next_state <= CLOaD;
            ELSE
               next_state <= CSToRe;
            END IF;
         WHEN Missed => 
            IF (IsitDirty= '1') THEN 
               next_state <= CSToRe;
            ELSIF (IsitDirty ='0') THEN 
               next_state <= CLOaD;
            ELSE
               next_state <= Missed;
            END IF;
         WHEN OTHERS =>
            next_state <= start;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      LdOn <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      start_hit <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN start => 
            start_hit <= '1';
         WHEN CLOaD => 
            PMRead_L <= '0' after 6ns;
            LdOn <= '1';
         WHEN CSToRe => 
            PMWRITE_L <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
