-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 16:12:34 03/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS   : IN     LC3b_word;
      DataOut   : IN     LC3b_word;
      LdOn      : IN     std_logic;
      MREAD_L   : IN     std_logic;
      MWRITEH_L : IN     std_logic;
      PMDATAIN  : IN     lc3b_oword;
      PMRESP_H  : IN     STD_LOGIC;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      mwritel_l : IN     std_logic;
      start_hit : IN     std_logic;
      DataIn    : OUT    LC3b_word;
      IsItDirty : OUT    STD_LOGIC;
      Miss      : OUT    std_logic;
      PMADDRESS : OUT    LC3B_WORD;
      PMDATAOUT : OUT    LC3b_oword;
      mresp_h   : OUT    STD_LOGIC
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 16:12:35 03/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL AddCWB        : LC3b_word;
   SIGNAL Blockoffset   : LC3b_c_offset;
   SIGNAL Cache_prehit  : STD_LOGIC;
   SIGNAL DatOutput0    : LC3b_oword;
   SIGNAL DatOutput1    : LC3b_oword;
   SIGNAL DataInput     : lc3b_oword;
   SIGNAL DataSetter1   : std_logic;
   SIGNAL DataSetter2   : std_logic;
   SIGNAL Dclk          : std_logic;
   SIGNAL Dirty1        : std_logic;
   SIGNAL Dirty2        : std_logic;
   SIGNAL DirtyVal1     : std_logic;
   SIGNAL DirtyVal2     : std_logic;
   SIGNAL F1Comp        : STD_LOGIC;
   SIGNAL F2comp        : STD_LOGIC;
   SIGNAL LRUout        : std_logic;
   SIGNAL LRUout2       : std_logic;
   SIGNAL PreHit2       : std_logic;
   SIGNAL Prehit1       : std_logic;
   SIGNAL Tag           : LC3b_c_tag;
   SIGNAL TagOut1       : LC3b_c_tag;
   SIGNAL TagOut2       : LC3b_c_tag;
   SIGNAL ValidO1       : std_logic;
   SIGNAL ValidO2       : std_logic;
   SIGNAL WhichTag      : LC3b_c_tag;
   SIGNAL WriteBackData : lc3b_oword;
   SIGNAL access_memory : STD_LOGIC;
   SIGNAL hit           : std_logic;
   SIGNAL index         : LC3b_c_index;
   SIGNAL owordout1     : LC3b_oword;
   SIGNAL sig0          : std_logic;
   SIGNAL write_access1 : std_logic;
   SIGNAL zero          : std_logic_vector( 3 DOWNTO 0);


   -- Component Declarations
   COMPONENT AddressConstructor
   PORT (
      zero     : IN     std_logic_vector ( 3 DOWNTO 0);
      AddCWB   : OUT    LC3b_word ;
      WhichTag : IN     LC3b_c_tag ;
      index    : IN     LC3b_c_index 
   );
   END COMPONENT;
   COMPONENT Adrsripper
   PORT (
      ADDRESS     : IN     LC3b_word ;
      Blockoffset : OUT    LC3b_c_offset ;
      Tag         : OUT    LC3b_c_tag ;
      index       : OUT    LC3b_c_index 
   );
   END COMPONENT;
   COMPONENT COMP_TAG
   PORT (
      A    : IN     LC3b_c_tag ;
      B    : IN     LC3b_c_tag ;
      Fout : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CacheWriter
   PORT (
      LRUout4         : IN     std_logic ;
      Ld_h            : IN     std_logic ;
      clk             : IN     std_logic ;
      hit_in          : IN     std_logic ;
      prehit_in       : IN     std_logic ;
      write_access_in : IN     std_logic ;
      exit_dirty      : OUT    std_logic ;
      setdata         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CacheWriterBlock
   PORT (
      DataOut       : IN     LC3b_word ;
      Line_data     : IN     LC3b_oword ;
      MWRITEH_L     : IN     std_logic ;
      mwritel_l     : IN     std_logic ;
      offset        : IN     LC3b_c_offset ;
      WriteBackData : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT DataArray
   PORT (
      DatInput  : IN     LC3b_oword;
      RESET_L   : IN     std_logic;
      index_in  : IN     LC3b_c_index;
      setData   : IN     std_logic;
      tag_in    : IN     LC3b_c_tag;
      DatOutput : OUT    LC3b_oword;
      TagOut    : OUT    LC3b_c_tag;
      ValidOut  : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT DirtyComputer1
   PORT (
      ADDRindex    : IN     lc3b_c_index;
      RESET_L      : IN     std_logic;
      WAY_dirtyIn  : IN     std_logic;
      WAY_write    : IN     std_logic;
      clk          : IN     std_logic;
      WAY_dirtyOut : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT HitorMiss
   PORT (
      Cache_prehit  : IN     STD_LOGIC ;
      access_memory : IN     STD_LOGIC ;
      clk           : IN     std_logic ;
      start_hit     : IN     std_logic ;
      Dclk          : OUT    std_logic ;
      Miss          : OUT    std_logic ;
      hit           : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRU
   PORT (
      RESET_L : IN     std_logic ;
      index   : IN     LC3b_c_index ;
      LRUout  : OUT    std_logic ;
      clk     : IN     std_logic ;
      hit     : IN     std_logic ;
      Prehit1 : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT MUX2_1TAG
   PORT (
      A   : IN     LC3b_c_tag;
      B   : IN     LC3b_c_tag;
      SEL : IN     STD_LOGIC;
      F   : OUT    LC3b_c_tag
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZeroOutput
   PORT (
      zero : OUT    std_logic_vector ( 3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT o_wordMux2
   PORT (
      A    : IN     lc3b_oword ;
      B    : IN     lc3b_oword ;
      Sel  : IN     std_logic ;
      Fmux : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT o_wordRipper
   PORT (
      A : IN     LC3b_oword ;
      B : IN     LC3b_c_offset ;
      F : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AddressConstructor USE ENTITY ece411.AddressConstructor;
   FOR ALL : Adrsripper USE ENTITY ece411.Adrsripper;
   FOR ALL : COMP_TAG USE ENTITY ece411.COMP_TAG;
   FOR ALL : CacheWriter USE ENTITY ece411.CacheWriter;
   FOR ALL : CacheWriterBlock USE ENTITY ece411.CacheWriterBlock;
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : DirtyComputer1 USE ENTITY ece411.DirtyComputer1;
   FOR ALL : HitorMiss USE ENTITY ece411.HitorMiss;
   FOR ALL : LRU USE ENTITY ece411.LRU;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : MUX2_1TAG USE ENTITY ece411.MUX2_1TAG;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NAND3 USE ENTITY mp3lib.NAND3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : ZeroOutput USE ENTITY ece411.ZeroOutput;
   FOR ALL : o_wordMux2 USE ENTITY ece411.o_wordMux2;
   FOR ALL : o_wordRipper USE ENTITY ece411.o_wordRipper;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- MRESP_H=Hit after 2ns;
   MRESP_H<=Hit;                                    


   -- Instance port mappings.
   MakeAddrs : AddressConstructor
      PORT MAP (
         zero     => zero,
         AddCWB   => AddCWB,
         WhichTag => WhichTag,
         index    => index
      );
   AdrBitPartition : Adrsripper
      PORT MAP (
         ADDRESS     => ADDRESS,
         Blockoffset => Blockoffset,
         Tag         => Tag,
         index       => index
      );
   TagCompare1 : COMP_TAG
      PORT MAP (
         A    => TagOut1,
         B    => Tag,
         Fout => F1Comp
      );
   TagCompare2 : COMP_TAG
      PORT MAP (
         A    => TagOut2,
         B    => Tag,
         Fout => F2comp
      );
   ForWay0 : CacheWriter
      PORT MAP (
         LRUout4         => LRUout2,
         Ld_h            => LdOn,
         clk             => clk,
         hit_in          => hit,
         prehit_in       => Prehit1,
         write_access_in => write_access1,
         exit_dirty      => DirtyVal1,
         setdata         => DataSetter1
      );
   ForWay1 : CacheWriter
      PORT MAP (
         LRUout4         => LRUout,
         Ld_h            => LdOn,
         clk             => clk,
         hit_in          => hit,
         prehit_in       => PreHit2,
         write_access_in => write_access1,
         exit_dirty      => DirtyVal2,
         setdata         => DataSetter2
      );
   oWOrdAlterer : CacheWriterBlock
      PORT MAP (
         DataOut       => DataOut,
         Line_data     => owordout1,
         MWRITEH_L     => MWRITEH_L,
         mwritel_l     => mwritel_l,
         offset        => Blockoffset,
         WriteBackData => WriteBackData
      );
   Way0 : DataArray
      PORT MAP (
         DatInput  => DataInput,
         RESET_L   => RESET_L,
         index_in  => index,
         setData   => DataSetter1,
         tag_in    => Tag,
         DatOutput => DatOutput0,
         TagOut    => TagOut1,
         ValidOut  => ValidO1
      );
   Way1 : DataArray
      PORT MAP (
         DatInput  => DataInput,
         RESET_L   => RESET_L,
         index_in  => index,
         setData   => DataSetter2,
         tag_in    => Tag,
         DatOutput => DatOutput1,
         TagOut    => TagOut2,
         ValidOut  => ValidO2
      );
   U_8 : DirtyComputer1
      PORT MAP (
         ADDRindex    => index,
         RESET_L      => RESET_L,
         WAY_dirtyIn  => DirtyVal1,
         WAY_write    => DataSetter1,
         clk          => clk,
         WAY_dirtyOut => Dirty1
      );
   U_15 : DirtyComputer1
      PORT MAP (
         ADDRindex    => index,
         RESET_L      => RESET_L,
         WAY_dirtyIn  => DirtyVal2,
         WAY_write    => DataSetter2,
         clk          => clk,
         WAY_dirtyOut => Dirty2
      );
   HitMissComputer : HitorMiss
      PORT MAP (
         Cache_prehit  => Cache_prehit,
         access_memory => access_memory,
         clk           => clk,
         start_hit     => start_hit,
         Dclk          => Dclk,
         Miss          => Miss,
         hit           => hit
      );
   U_9 : LRU
      PORT MAP (
         RESET_L => RESET_L,
         index   => index,
         LRUout  => LRUout,
         clk     => clk,
         hit     => hit,
         Prehit1 => Prehit1
      );
   U_14 : MUX2_1TAG
      PORT MAP (
         A   => TagOut1,
         B   => TagOut2,
         F   => WhichTag,
         SEL => LRUout
      );
   U_11 : WordMux2
      PORT MAP (
         A   => AddCWB,
         B   => ADDRESS,
         Sel => LdOn,
         F   => PMADDRESS
      );
   AdrsAssist : ZeroOutput
      PORT MAP (
         zero => zero
      );
   U_4 : o_wordMux2
      PORT MAP (
         A    => WriteBackData,
         B    => PMDATAIN,
         Sel  => LdOn,
         Fmux => DataInput
      );
   U_5 : o_wordMux2
      PORT MAP (
         A    => DatOutput0,
         B    => DatOutput1,
         Sel  => PreHit2,
         Fmux => owordout1
      );
   U_10 : o_wordMux2
      PORT MAP (
         A    => DatOutput0,
         B    => DatOutput1,
         Sel  => LRUout,
         Fmux => PMDATAOUT
      );
   U_6 : o_wordRipper
      PORT MAP (
         A => owordout1,
         B => Blockoffset,
         F => DataIn
      );
   U_0 : AND2
      PORT MAP (
         A => F1Comp,
         B => ValidO1,
         F => Prehit1
      );
   U_1 : AND2
      PORT MAP (
         A => F2comp,
         B => ValidO2,
         F => PreHit2
      );
   U_13 : MUX2_1
      PORT MAP (
         A   => Dirty1,
         B   => Dirty2,
         SEL => LRUout,
         F   => IsItDirty
      );
   U_3 : NAND2
      PORT MAP (
         A => mwritel_l,
         B => MWRITEH_L,
         F => write_access1
      );
   U_2 : NAND3
      PORT MAP (
         A => MREAD_L,
         B => mwritel_l,
         C => MWRITEH_L,
         F => access_memory
      );
   U_12 : NOT1
      PORT MAP (
         A => LRUout,
         F => LRUout2
      );
   U_7 : OR2
      PORT MAP (
         A => Prehit1,
         B => PreHit2,
         F => Cache_prehit
      );

END struct;
