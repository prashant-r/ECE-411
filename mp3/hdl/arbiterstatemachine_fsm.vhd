-- VHDL Entity ece411.ArbiterStateMachine.interface
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 13:36:42 03/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ArbiterStateMachine IS
   PORT( 
      D_request : IN     STD_LOGIC;
      I_request : IN     STD_LOGIC;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      Sel       : OUT    std_logic
   );

-- Declarations

END ArbiterStateMachine ;

--
-- VHDL Architecture ece411.ArbiterStateMachine.fsm
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 13:36:42 03/30/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF ArbiterStateMachine IS

   TYPE STATE_TYPE IS (
      ArbiterInit,
      DataRequest,
      InstructionRequest
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      reset_l
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset_l = '0') THEN
         current_state <= ArbiterInit;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      D_request,
      I_request,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN ArbiterInit => 
            IF (D_request = '1') THEN 
               next_state <= DataRequest;
            ELSIF (I_request = '1') THEN 
               next_state <= InstructionRequest;
            ELSE
               next_state <= ArbiterInit;
            END IF;
         WHEN DataRequest => 
            IF (D_request = '0') THEN 
               next_state <= ArbiterInit;
            ELSE
               next_state <= DataRequest;
            END IF;
         WHEN InstructionRequest => 
            IF (I_request = '0') THEN 
               next_state <= ArbiterInit;
            ELSE
               next_state <= InstructionRequest;
            END IF;
         WHEN OTHERS =>
            next_state <= ArbiterInit;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      Sel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN DataRequest => 
            Sel <= '0' ;
         WHEN InstructionRequest => 
            Sel <='1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
