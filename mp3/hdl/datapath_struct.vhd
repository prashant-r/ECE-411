-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 15:25:04 02/22/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel     : IN     std_logic_vector (1 DOWNTO 0);
      ALUop         : IN     LC3b_aluop;
      DataIn        : IN     LC3b_word;
      DestnSel      : IN     std_logic;
      LoadIR        : IN     std_logic;
      LoadMAR       : IN     std_logic;
      LoadMDR       : IN     std_logic;
      LoadNZP       : IN     std_logic;
      LoadPC        : IN     std_logic;
      MARMuxSel     : IN     std_logic_vector (1 DOWNTO 0);
      MDRMuxSel     : IN     std_logic;
      PCMuxSel      : IN     std_logic_vector (1 DOWNTO 0);
      RESET_L       : IN     std_logic;
      RFAorMDR      : IN     std_logic;
      RFMuxSel      : IN     std_logic_vector (2 DOWNTO 0);
      RegWrite      : IN     std_logic;
      SextorADJ     : IN     std_logic;
      ShiftSelector : IN     std_logic_vector (1 DOWNTO 0);
      StoreSR       : IN     std_logic;
      clk           : IN     std_logic;
      ADDRESS       : OUT    LC3b_word;
      CheckN        : OUT    std_logic;
      CheckP        : OUT    std_logic;
      CheckZ        : OUT    std_logic;
      DataOut       : OUT    LC3b_word;
      Opcode        : OUT    LC3b_opcode;
      Parity        : OUT    std_logic;
      bit11         : OUT    std_logic;
      bit4          : OUT    std_logic;
      bit5          : OUT    std_logic;
      n             : OUT    std_logic;
      p             : OUT    std_logic;
      z             : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - ravi7.ews (linux-a3.ews.illinois.edu)
--          at - 15:25:04 02/22/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11       : LC3b_word;
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL C           : LC3b_word;
   SIGNAL Fin         : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL ImmD5       : LC3b_imm5;
   SIGNAL Immd4       : LC3b_nibble;
   SIGNAL Input01     : LC3b_word;
   SIGNAL Llog        : LC3b_word;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDRout      : LC3b_word;
   SIGNAL PCMuxout    : LC3b_word;
   SIGNAL PCPlus2out  : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL RFAZEXTout  : LC3b_word;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxout    : LC3b_word;
   SIGNAL Rarith      : LC3b_word;
   SIGNAL Rlog        : LC3b_word;
   SIGNAL Sext6out    : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxOut : LC3b_reg;
   SIGNAL dest        : LC3b_reg;
   SIGNAL destn       : LC3b_reg;
   SIGNAL index6      : LC3b_index6;
   SIGNAL offset11    : LC3b_offset11;
   SIGNAL offset9     : LC3b_offset9;
   SIGNAL r7ch        : LC3b_reg;
   SIGNAL ran2        : LC3b_word;
   SIGNAL ran54       : LC3b_word;
   SIGNAL ran7        : LC3b_word;
   SIGNAL trap_8      : LC3b_trapvect8;
   SIGNAL zHout       : LC3b_word;
   SIGNAL zLout       : LC3b_word;
   SIGNAL zextImm     : LC3b_word;
   SIGNAL zextTrap    : LC3b_word;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR   : IN     std_logic ;
      MDRout   : IN     LC3b_word ;
      clk      : IN     std_logic ;
      Opcode   : OUT    LC3b_opcode ;
      SrcA     : OUT    LC3b_reg ;
      SrcB     : OUT    LC3b_reg ;
      bit5     : OUT    std_logic ;
      dest     : OUT    LC3b_reg ;
      index6   : OUT    LC3b_index6 ;
      offset9  : OUT    LC3b_offset9 ;
      ImmD5    : OUT    LC3b_imm5 ;
      bit11    : OUT    std_logic ;
      offset11 : OUT    LC3b_offset11 ;
      trap_8   : OUT    LC3b_trapvect8 ;
      bit4     : OUT    std_logic ;
      Immd4    : OUT    LC3b_nibble 
   );
   END COMPONENT;
   COMPONENT JSRadd
   PORT (
      ADJ11 : IN     LC3b_word ;
      PCout : IN     LC3b_word ;
      clk   : IN     std_logic ;
      ran2  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT LSHF
   PORT (
      RFAout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      zextImm : IN     LC3b_word ;
      Llog    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ParityTeller
   PORT (
      ADDRESS : IN     LC3b_word ;
      clk     : IN     std_logic ;
      Parity  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RSHArith
   PORT (
      RFAout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      zextImm : IN     LC3b_word ;
      Rarith  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RSHLOg
   PORT (
      RFAout  : IN     LC3b_word ;
      clk     : IN     std_logic ;
      zextImm : IN     LC3b_word ;
      Rlog    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      input  : IN     LC3b_word ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxOut : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      destn       : IN     LC3b_reg 
   );
   END COMPONENT;
   COMPONENT RegSelectMux
   PORT (
      A   : IN     LC3b_reg;
      B   : IN     LC3b_reg;
      Sel : IN     std_logic;
      F   : OUT    LC3b_reg
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      Sext6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SgnExt5
   PORT (
      ImmD5 : IN     LC3b_imm5 ;
      clk   : IN     std_logic ;
      C     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Shft8
   PORT (
      clk   : IN     std_logic ;
      ran54 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      StoreMuxOut : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      Input00 : IN     LC3b_word ;
      Input01 : IN     LC3b_word ;
      Input10 : IN     LC3b_word ;
      Input11 : IN     LC3b_word ;
      Select4 : IN     std_logic_vector (1 DOWNTO 0);
      Fin     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      Input000 : IN     LC3b_word;
      Input001 : IN     LC3b_word;
      Input010 : IN     LC3b_word;
      Input011 : IN     LC3b_word;
      Input100 : IN     LC3b_word;
      Input101 : IN     LC3b_word;
      Input110 : IN     LC3b_word;
      Input111 : IN     LC3b_word;
      Select8  : IN     std_logic_vector (2 DOWNTO 0);
      Fin      : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT ZEXT8
   PORT (
      clk      : IN     std_logic ;
      trap_8   : IN     LC3b_trapvect8 ;
      zextTrap : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXTImmD4
   PORT (
      Immd4   : IN     LC3b_nibble ;
      clk     : IN     std_logic ;
      zextImm : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZextHByte
   PORT (
      MDRout : IN     LC3b_word ;
      clk    : IN     std_logic ;
      zHout  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZextLByte
   PORT (
      clk    : IN     std_logic ;
      zLout  : OUT    LC3b_word ;
      MDRout : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT asext11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3b_offset11 ;
      ADJ11    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT r7Gen
   PORT (
      clk  : IN     std_logic ;
      r7ch : OUT    LC3b_reg 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSRadd USE ENTITY ece411.JSRadd;
   FOR ALL : LSHF USE ENTITY ece411.LSHF;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : ParityTeller USE ENTITY ece411.ParityTeller;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : RSHArith USE ENTITY ece411.RSHArith;
   FOR ALL : RSHLOg USE ENTITY ece411.RSHLOg;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : RegSelectMux USE ENTITY ece411.RegSelectMux;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : SgnExt5 USE ENTITY ece411.SgnExt5;
   FOR ALL : Shft8 USE ENTITY ece411.Shft8;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : ZEXT8 USE ENTITY ece411.ZEXT8;
   FOR ALL : ZEXTImmD4 USE ENTITY ece411.ZEXTImmD4;
   FOR ALL : ZextHByte USE ENTITY ece411.ZextHByte;
   FOR ALL : ZextLByte USE ENTITY ece411.ZextLByte;
   FOR ALL : asext11 USE ENTITY ece411.asext11;
   FOR ALL : r7Gen USE ENTITY ece411.r7Gen;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   --Dataout = MDRout
   DATAOUT <= MDRout;                              


   -- Instance port mappings.
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   U_3 : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         BRaddout => BRaddout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR   => LoadIR,
         MDRout   => MDRout,
         clk      => clk,
         Opcode   => Opcode,
         SrcA     => SrcA,
         SrcB     => SrcB,
         bit5     => bit5,
         dest     => dest,
         index6   => index6,
         offset9  => offset9,
         ImmD5    => ImmD5,
         bit11    => bit11,
         offset11 => offset11,
         trap_8   => trap_8,
         bit4     => bit4,
         Immd4    => Immd4
      );
   aJSRadd : JSRadd
      PORT MAP (
         ADJ11 => ADJ11,
         PCout => PCout,
         clk   => clk,
         ran2  => ran2
      );
   U_0 : LSHF
      PORT MAP (
         RFAout  => RFAout,
         clk     => clk,
         zextImm => zextImm,
         Llog    => Llog
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   U_12 : ParityTeller
      PORT MAP (
         ADDRESS => ADDRESS_internal,
         clk     => clk,
         Parity  => Parity
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   U_7 : RSHArith
      PORT MAP (
         RFAout  => RFAout,
         clk     => clk,
         zextImm => zextImm,
         Rarith  => Rarith
      );
   U_2 : RSHLOg
      PORT MAP (
         RFAout  => RFAout,
         clk     => clk,
         zextImm => zextImm,
         Rlog    => Rlog
      );
   MAR : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => MARMuxout,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   PC : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => PCMuxout,
         load   => LoadPC,
         Output => PCout
      );
   U_1 : Reg16
      PORT MAP (
         RESET  => RESET_L,
         clk    => clk,
         input  => MDRMuxout,
         load   => LoadMDR,
         Output => MDRout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxOut => StoreMuxOut,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout,
         destn       => destn
      );
   aDestSelector : RegSelectMux
      PORT MAP (
         A   => r7ch,
         B   => dest,
         F   => destn,
         Sel => DestnSel
      );
   U_11 : SEXT6
      PORT MAP (
         clk      => clk,
         index6   => index6,
         Sext6out => Sext6out
      );
   aSEXT5 : SgnExt5
      PORT MAP (
         ImmD5 => ImmD5,
         clk   => clk,
         C     => C
      );
   U_16 : Shft8
      PORT MAP (
         clk   => clk,
         ran54 => ran54
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         dest        => dest,
         StoreMuxOut => StoreMuxOut
      );
   U_6 : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => MDRout,
         Sel => RFAorMDR,
         F   => RFAZEXTout
      );
   U_10 : WordMux2
      PORT MAP (
         A   => ADJ6out,
         B   => Sext6out,
         Sel => SextorADJ,
         F   => Input01
      );
   aMARMux : WordMux2
      PORT MAP (
         A   => DataIn,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   ALUMux : WordMux4
      PORT MAP (
         Input00 => RFBout,
         Input01 => Input01,
         Input10 => C,
         Input11 => ran54,
         Select4 => ALUMuxSel,
         Fin     => ALUMuxout
      );
   MARMux : WordMux4
      PORT MAP (
         Input00 => PCout,
         Input01 => ALUout,
         Input10 => zextTrap,
         Input11 => MDRout,
         Select4 => MARMuxSel,
         Fin     => MARMuxout
      );
   PCMuz : WordMux4
      PORT MAP (
         Input00 => PCPlus2out,
         Input01 => BRaddout,
         Input10 => RFAZEXTout,
         Input11 => ran2,
         Select4 => PCMuxSel,
         Fin     => PCMuxout
      );
   U_8 : WordMux4
      PORT MAP (
         Input00 => Llog,
         Input01 => Llog,
         Input10 => Rlog,
         Input11 => Rarith,
         Select4 => ShiftSelector,
         Fin     => Fin
      );
   RFMux : WordMux8
      PORT MAP (
         Fin      => RFMuxout,
         Input000 => MDRout,
         Input001 => ALUout,
         Input010 => BRaddout,
         Input011 => PCout,
         Input100 => Fin,
         Input101 => zLout,
         Input110 => zHout,
         Input111 => ran7,
         Select8  => RFMuxSel
      );
   U_5 : ZEXT8
      PORT MAP (
         clk      => clk,
         trap_8   => trap_8,
         zextTrap => zextTrap
      );
   U_9 : ZEXTImmD4
      PORT MAP (
         Immd4   => Immd4,
         clk     => clk,
         zextImm => zextImm
      );
   U_14 : ZextHByte
      PORT MAP (
         MDRout => MDRout,
         clk    => clk,
         zHout  => zHout
      );
   U_13 : ZextLByte
      PORT MAP (
         clk    => clk,
         zLout  => zLout,
         MDRout => MDRout
      );
   U_4 : asext11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11    => ADJ11
      );
   ar7Gen : r7Gen
      PORT MAP (
         clk  => clk,
         r7ch => r7ch
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;

END struct;
