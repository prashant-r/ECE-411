-- VHDL Entity ece411.InstrDecode.interface
--
-- Created:
--          by - ravi7.ews (linux-a2.ews.illinois.edu)
--          at - 11:58:53 03/27/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY InstrDecode IS
   PORT( 
      Control      : IN     CONTROL_WORD;
      IR           : IN     LC3b_word;
      RESET_L      : IN     STD_LOGIC;
      Reg_DATAIN   : IN     LC3b_word;
      Set_cc       : IN     STD_LOGIC;
      WB_ALUout    : IN     LC3b_word;
      clk          : IN     std_logic;
      dest_reg     : IN     LC3b_reg;
      set_regfile  : IN     STD_LOGIC;
      ID_CC        : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      ID_IR        : OUT    LC3b_word;
      ID_dest_reg  : OUT    LC3b_reg;
      ID_srcA_regB : OUT    LC3B_WORD;
      ID_srcB_regB : OUT    LC3b_word;
      Opcode       : OUT    LC3b_opcode
   );

-- Declarations

END InstrDecode ;

--
-- VHDL Architecture ece411.InstrDecode.struct
--
-- Created:
--          by - ravi7.ews (linux-a2.ews.illinois.edu)
--          at - 11:58:54 03/27/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF InstrDecode IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F           : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL F1          : STD_LOGIC;
   SIGNAL Gen_cc      : LC3b_cc;
   SIGNAL ID_srcB     : LC3b_word;
   SIGNAL Imm5        : lc3b_imm5;
   SIGNAL NZP         : LC3b_cc;
   SIGNAL Reg7        : std_logic_vector(2 DOWNTO 0);
   SIGNAL SRCB        : LC3b_reg;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL Srcb_sel    : std_logic;
   SIGNAL adj5output1 : LC3b_word;
   SIGNAL bit5        : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL ID_dest_reg_internal : LC3b_reg;


   -- Component Declarations
   COMPONENT ADJ5outputs
   PORT (
      Imm5        : IN     lc3b_imm5;
      RESET_L     : IN     STD_LOGIC;
      clk         : IN     std_logic;
      adj5output1 : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC;
      B : IN     STD_LOGIC;
      F : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT BitSelector
   PORT (
      clk           : IN     std_logic;
      regA_inst_out : IN     LC3b_word;
      Imm5          : OUT    lc3b_imm5;
      NZP           : OUT    LC3b_cc;
      Opcode        : OUT    LC3b_opcode;
      SRCB          : OUT    LC3b_reg;
      SrcA          : OUT    LC3b_reg;
      bit5          : OUT    std_logic;
      dest          : OUT    LC3b_reg;
      index6        : OUT    LC3b_index6;
      offset6       : OUT    LC3b_index6;
      offset9       : OUT    LC3b_offset9
   );
   END COMPONENT;
   COMPONENT CondNCode
   PORT (
      RESET_L   : IN     STD_LOGIC;
      WB_ALUout : IN     LC3b_word;
      clk       : IN     std_logic;
      Gen_cc    : OUT    LC3b_cc
   );
   END COMPONENT;
   COMPONENT Control_slice
   PORT (
      Control_ID  : IN     CONTROL_WORD;
      RESET_L     : IN     STD_LOGIC;
      clk         : IN     std_logic;
      ALUop_ID    : OUT    LC3b_aluop;
      LD_reg_h    : OUT    std_logic;
      PCMuxSel    : OUT    STd_logic;
      Set_cc_h    : OUT    std_logic;
      dataMuXsel  : OUT    std_logic_vector (1 DOWNTO 0);
      mread_l     : OUT    std_logic;
      mwriteh_l   : OUT    std_logic;
      mwritel_l   : OUT    std_logic;
      srcb_select : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT MUX2_3
   PORT (
      A   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      SEL : IN     STD_LOGIC;
      F   : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT reg7Gen
   PORT (
      RESET_L : IN     STD_LOGIC ;
      clk     : IN     std_logic ;
      Reg7    : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT REG3
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT REGFILE
   PORT (
      CLK      : IN     STD_LOGIC ;
      DEST     : IN     LC3B_REG ;
      DIN      : IN     LC3B_WORD ;
      RESET_L  : IN     STD_LOGIC ;
      REGWRITE : IN     STD_LOGIC ;
      SRCA     : IN     LC3B_REG ;
      SRCB     : IN     LC3B_REG ;
      A        : OUT    LC3B_WORD ;
      B        : OUT    LC3B_WORD 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ5outputs USE ENTITY ece411.ADJ5outputs;
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BitSelector USE ENTITY ece411.BitSelector;
   FOR ALL : CondNCode USE ENTITY ece411.CondNCode;
   FOR ALL : Control_slice USE ENTITY ece411.Control_slice;
   FOR ALL : MUX2_3 USE ENTITY ece411.MUX2_3;
   FOR ALL : REG3 USE ENTITY mp3lib.REG3;
   FOR ALL : REGFILE USE ENTITY mp3lib.REGFILE;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : reg7Gen USE ENTITY ece411.reg7Gen;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 3 eb3
   -- eb3 3
   ID_IR <= IR;                                       


   -- Instance port mappings.
   aADJ5output : ADJ5outputs
      PORT MAP (
         clk         => clk,
         RESET_L     => RESET_L,
         adj5output1 => adj5output1,
         Imm5        => Imm5
      );
   U_5 : AND2
      PORT MAP (
         A => bit5,
         B => Srcb_sel,
         F => F1
      );
   U_1 : BitSelector
      PORT MAP (
         clk           => clk,
         regA_inst_out => IR,
         Imm5          => Imm5,
         NZP           => NZP,
         Opcode        => Opcode,
         SRCB          => SRCB,
         SrcA          => SrcA,
         bit5          => bit5,
         dest          => ID_dest_reg_internal,
         index6        => OPEN,
         offset9       => OPEN,
         offset6       => OPEN
      );
   U_2 : CondNCode
      PORT MAP (
         RESET_L   => RESET_L,
         WB_ALUout => WB_ALUout,
         clk       => clk,
         Gen_cc    => Gen_cc
      );
   U_4 : Control_slice
      PORT MAP (
         Control_ID  => Control,
         RESET_L     => RESET_L,
         clk         => clk,
         ALUop_ID    => OPEN,
         dataMuXsel  => OPEN,
         LD_reg_h    => OPEN,
         Set_cc_h    => OPEN,
         PCMuxSel    => OPEN,
         mread_l     => OPEN,
         mwritel_l   => OPEN,
         mwriteh_l   => OPEN,
         srcb_select => Srcb_sel
      );
   U_3 : MUX2_3
      PORT MAP (
         A   => ID_dest_reg_internal,
         B   => SRCB,
         SEL => Srcb_sel,
         F   => F
      );
   SrcBMux : WordMux2
      PORT MAP (
         A   => ID_srcB,
         B   => adj5output1,
         Sel => F1,
         F   => ID_srcB_regB
      );
   aReg7Gen : reg7Gen
      PORT MAP (
         RESET_L => RESET_L,
         clk     => clk,
         Reg7    => Reg7
      );
   U_0 : REG3
      PORT MAP (
         RESET_L => RESET_L,
         A       => Gen_cc,
         EN      => Set_cc,
         CLK     => clk,
         F       => ID_CC
      );
   aREGFILE : REGFILE
      PORT MAP (
         CLK      => clk,
         DEST     => dest_reg,
         DIN      => Reg_DATAIN,
         RESET_L  => RESET_L,
         REGWRITE => set_regfile,
         SRCA     => SrcA,
         SRCB     => F,
         A        => ID_srcA_regB,
         B        => ID_srcB
      );

   -- Implicit buffered output assignments
   ID_dest_reg <= ID_dest_reg_internal;

END struct;
