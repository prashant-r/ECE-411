-- VHDL Entity ece411.WIFDEM.symbol
--
-- Created:
--          by - ravi7.ews (linux-a1.ews.illinois.edu)
--          at - 21:31:12 03/27/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY WIFDEM IS
   PORT( 
      DATA_DATAIN    : IN     LC3b_word;
      DATA_MRESP_H   : IN     std_logic;
      RESET_L        : IN     STD_LOGIC;
      clk            : IN     std_logic;
      ifetch_datain  : IN     LC3b_word;
      ifetch_mresp_h : IN     std_logic;
      DATA_ADDRESS   : OUT    LC3b_word;
      DATA_DATAOUT   : OUT    LC3b_word;
      DATA_MREAD_L   : OUT    std_logic;
      DATA_MWRITEH_L : OUT    std_logic;
      DATA_MWRITEL_L : OUT    std_logic;
      ifetch_address : OUT    LC3b_word;
      ifetch_mread_l : OUT    std_logic
   );

-- Declarations

END WIFDEM ;

--
-- VHDL Architecture ece411.WIFDEM.struct
--
-- Created:
--          by - ravi7.ews (linux-a1.ews.illinois.edu)
--          at - 21:31:13 03/27/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF WIFDEM IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALURESULT       : LC3b_word;
   SIGNAL Branch_true     : STD_LOGIC;
   SIGNAL Branch_true_EX  : STD_LOGIC;
   SIGNAL Cond_Code       : std_logic_vector(2 DOWNTO 0);
   SIGNAL Control         : CONTROL_WORD;
   SIGNAL EX_CONTROL      : CONTROL_WORD;
   SIGNAL EX_SRCA         : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL EX_SRCB         : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL Ex_CC           : LC3b_cc;
   SIGNAL Ex_IR           : LC3b_word;
   SIGNAL Ex_NPC          : LC3b_word;
   SIGNAL Ex_dest_reg     : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL ID_CC           : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL ID_IR           : LC3b_word;
   SIGNAL ID_dest_reg     : LC3b_reg;
   SIGNAL ID_srcA_regB    : LC3B_WORD;
   SIGNAL ID_srcB_regB    : LC3b_word;
   SIGNAL IR              : LC3b_word;
   SIGNAL Load_PC         : STD_LOGIC;
   SIGNAL MEM_ALUout      : LC3b_word;
   SIGNAL MEM_Control     : CONTROL_WORD;
   SIGNAL MEM_NEXTPC_OUT  : LC3b_word;
   SIGNAL MEM_SRCA        : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL MEM_SRCB        : std_logic_vector(15 DOWNTO 0);
   SIGNAL Mem_ALU_Out     : LC3b_word;
   SIGNAL Mem_Address     : LC3b_word;
   SIGNAL Mem_CC          : LC3b_reg;
   SIGNAL Mem_CC_out      : LC3b_cc;
   SIGNAL Mem_Control_out : CONTROL_WORD;
   SIGNAL Mem_IR          : LC3b_word;
   SIGNAL Mem_IR_Out      : LC3b_word;
   SIGNAL Mem_dataout     : LC3b_word;
   SIGNAL Mem_nextPC      : LC3b_word;
   SIGNAL Opcode          : LC3b_opcode;
   SIGNAL PCMuxSelect_Mem : std_logic;
   SIGNAL PCPlus2out      : LC3b_word;
   SIGNAL Reg_DATAIN      : LC3b_word;
   SIGNAL Set_cc          : STD_LOGIC;
   SIGNAL Set_regB        : STD_LOGIC;
   SIGNAL TARGET_PC       : LC3b_word;
   SIGNAL WB_ALUout       : LC3b_word;
   SIGNAL WB_Control      : CONTROL_WORD;
   SIGNAL WB_IR           : LC3b_word;
   SIGNAL WB_MEMout       : LC3b_word;
   SIGNAL WB_NextPC       : LC3b_word;
   SIGNAL dest_reg        : LC3b_reg;
   SIGNAL dest_regC       : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL dest_regD       : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL ifetch_out      : LC3b_word;
   SIGNAL ifetch_ready    : std_logic;
   SIGNAL regA_pc_out     : LC3b_word;
   SIGNAL set_regA        : std_logic;
   SIGNAL set_regC        : std_logic;
   SIGNAL set_regD        : std_logic;
   SIGNAL set_regfile     : STD_LOGIC;


   -- Component Declarations
   COMPONENT CONTROM
   PORT (
      clk     : IN     std_logic ;
      RESET_L : IN     STD_LOGIC ;
      Opcode  : IN     LC3b_opcode ;
      IR      : IN     LC3b_word ;
      Control : OUT    CONTROL_WORD 
   );
   END COMPONENT;
   COMPONENT EX_MEM
   PORT (
      RESET_L        : IN     STD_LOGIC ;
      CLK            : IN     std_logic ;
      set_regC       : IN     std_logic ;
      ALURESULT      : IN     LC3b_word ;
      MEM_ALUout     : OUT    LC3b_word ;
      MEM_Control    : OUT    CONTROL_WORD ;
      Mem_nextPC     : OUT    LC3b_word ;
      Mem_IR         : OUT    LC3b_word ;
      Mem_CC         : OUT    LC3b_reg ;
      Ex_CC          : IN     LC3b_cc ;
      EX_CONTROL     : IN     CONTROL_WORD ;
      Ex_IR          : IN     LC3b_word ;
      Ex_NPC         : IN     LC3b_word ;
      dest_regC      : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      Ex_dest_reg    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Branch_true    : IN     STD_LOGIC ;
      Branch_true_EX : OUT    STD_LOGIC ;
      EX_SRCA        : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      EX_SRCB        : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      MEM_SRCA       : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      MEM_SRCB       : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Execute
   PORT (
      EX_CONTROL  : IN     CONTROL_WORD ;
      EX_SRCA     : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      EX_SRCB     : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      Ex_CC       : IN     LC3b_cc ;
      Ex_IR       : IN     LC3b_word ;
      Ex_NPC      : IN     LC3b_word ;
      Ex_dest_reg : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Mem_CC      : IN     LC3b_reg ;
      RESET_L     : IN     STD_LOGIC ;
      clk         : IN     std_logic ;
      ALURESULT   : OUT    LC3b_word ;
      Branch_true : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT ID_EX
   PORT (
      RESET_L      : IN     STD_LOGIC ;
      clk          : IN     std_logic ;
      Control      : IN     CONTROL_WORD ;
      ID_CC        : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      ID_IR        : IN     LC3b_word ;
      ID_srcB_regB : IN     LC3b_word ;
      ID_srcA_regB : IN     LC3B_WORD ;
      Ex_CC        : OUT    LC3b_cc ;
      Ex_IR        : OUT    LC3b_word ;
      Ex_NPC       : OUT    LC3b_word ;
      EX_SRCA      : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      EX_SRCB      : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      Set_regB     : IN     STD_LOGIC ;
      Ex_dest_reg  : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      regA_pc_out  : IN     LC3b_word ;
      ID_dest_reg  : IN     LC3b_reg ;
      EX_CONTROL   : OUT    CONTROL_WORD 
   );
   END COMPONENT;
   COMPONENT IF_ID
   PORT (
      PCPlus2out   : IN     LC3b_word ;
      RESET_L      : IN     STD_LOGIC ;
      clk          : IN     std_logic ;
      ifetch_out   : IN     LC3b_word ;
      ifetch_ready : IN     std_logic ;
      set_regA     : IN     std_logic ;
      IR           : OUT    LC3b_word ;
      regA_pc_out  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT InstFetch
   PORT (
      Branch_true_EX  : IN     STD_LOGIC ;
      Load_PC         : IN     STD_LOGIC ;
      PCMuxSelect_Mem : IN     std_logic ;
      RESET_L         : IN     STD_LOGIC ;
      TARGET_PC       : IN     LC3b_word ;
      clk             : IN     std_logic ;
      ifetch_datain   : IN     LC3b_word ;
      ifetch_mresp_h  : IN     std_logic ;
      PCPlus2out      : OUT    LC3b_word ;
      ifetch_address  : OUT    LC3b_word ;
      ifetch_mread_l  : OUT    std_logic ;
      ifetch_out      : OUT    LC3b_word ;
      ifetch_ready    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT InstrDecode
   PORT (
      Control      : IN     CONTROL_WORD ;
      IR           : IN     LC3b_word ;
      RESET_L      : IN     STD_LOGIC ;
      Reg_DATAIN   : IN     LC3b_word ;
      Set_cc       : IN     STD_LOGIC ;
      WB_ALUout    : IN     LC3b_word ;
      clk          : IN     std_logic ;
      dest_reg     : IN     LC3b_reg ;
      set_regfile  : IN     STD_LOGIC ;
      ID_CC        : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      ID_IR        : OUT    LC3b_word ;
      ID_dest_reg  : OUT    LC3b_reg ;
      ID_srcA_regB : OUT    LC3B_WORD ;
      ID_srcB_regB : OUT    LC3b_word ;
      Opcode       : OUT    LC3b_opcode 
   );
   END COMPONENT;
   COMPONENT MEM_WB
   PORT (
      RESET_L         : IN     STD_LOGIC ;
      clk             : IN     std_logic ;
      Mem_ALU_Out     : IN     LC3b_word ;
      Mem_Control_out : IN     CONTROL_WORD ;
      Mem_IR_Out      : IN     LC3b_word ;
      set_regD        : IN     std_logic ;
      WB_Control      : OUT    CONTROL_WORD ;
      WB_IR           : OUT    LC3b_word ;
      WB_NextPC       : OUT    LC3b_word ;
      WB_ALUout       : OUT    LC3b_word ;
      dest_regD       : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      dest_regC       : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Mem_Address     : IN     LC3b_word ;
      WB_MEMout       : OUT    LC3b_word ;
      Mem_dataout     : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT MemoryStage
   PORT (
      DATA_DATAIN     : IN     LC3b_word ;
      DATA_MRESP_H    : IN     std_logic ;
      MEM_ALUout      : IN     LC3b_word ;
      MEM_Control     : IN     CONTROL_WORD ;
      MEM_SRCA        : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      Mem_CC          : IN     LC3b_reg ;
      Mem_IR          : IN     LC3b_word ;
      Mem_SrcB        : IN     std_logic_vector (15 DOWNTO 0);
      Mem_nextPC      : IN     LC3b_word ;
      RESET_L         : IN     STD_LOGIC ;
      clk             : IN     std_logic ;
      DATA_ADDRESS    : OUT    LC3b_word ;
      DATA_DATAOUT    : OUT    LC3b_word ;
      DATA_MREAD_L    : OUT    std_logic ;
      DATA_MWRITEH_L  : OUT    std_logic ;
      DATA_MWRITEL_L  : OUT    std_logic ;
      MEM_NEXTPC_OUT  : OUT    LC3b_word ;
      Mem_ALU_Out     : OUT    LC3b_word ;
      Mem_Address     : OUT    LC3b_word ;
      Mem_CC_out      : OUT    LC3b_cc ;
      Mem_Control_out : OUT    CONTROL_WORD ;
      Mem_IR_Out      : OUT    LC3b_word ;
      Mem_dataout     : OUT    LC3b_word ;
      PCMuxSelect_Mem : OUT    std_logic ;
      TARGET_PC       : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StallingUnit
   PORT (
      RESET_L        : IN     STD_LOGIC ;
      clk            : IN     std_logic ;
      ifetch_mresp_h : IN     std_logic ;
      Load_PC        : OUT    STD_LOGIC ;
      Set_regB       : OUT    STD_LOGIC ;
      set_regA       : OUT    std_logic ;
      set_regC       : OUT    std_logic ;
      set_regD       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WriteBack
   PORT (
      RESET_L     : IN     STD_LOGIC ;
      WB_ALUout   : IN     LC3b_word ;
      WB_Control  : IN     CONTROL_WORD ;
      WB_IR       : IN     LC3b_word ;
      WB_MEMout   : IN     LC3b_word ;
      WB_NextPC   : IN     LC3b_word ;
      clk         : IN     std_logic ;
      dest_regD   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Cond_Code   : OUT    std_logic_vector (2 DOWNTO 0);
      Reg_DATAIN  : OUT    LC3b_word ;
      Set_cc      : OUT    STD_LOGIC ;
      dest_reg    : OUT    LC3b_reg ;
      set_regfile : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : CONTROM USE ENTITY ece411.CONTROM;
   FOR ALL : EX_MEM USE ENTITY ece411.EX_MEM;
   FOR ALL : Execute USE ENTITY ece411.Execute;
   FOR ALL : ID_EX USE ENTITY ece411.ID_EX;
   FOR ALL : IF_ID USE ENTITY ece411.IF_ID;
   FOR ALL : InstFetch USE ENTITY ece411.InstFetch;
   FOR ALL : InstrDecode USE ENTITY ece411.InstrDecode;
   FOR ALL : MEM_WB USE ENTITY ece411.MEM_WB;
   FOR ALL : MemoryStage USE ENTITY ece411.MemoryStage;
   FOR ALL : StallingUnit USE ENTITY ece411.StallingUnit;
   FOR ALL : WriteBack USE ENTITY ece411.WriteBack;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : CONTROM
      PORT MAP (
         clk     => clk,
         RESET_L => RESET_L,
         Opcode  => Opcode,
         IR      => IR,
         Control => Control
      );
   REGC : EX_MEM
      PORT MAP (
         RESET_L        => RESET_L,
         clk            => clk,
         set_regC       => set_regC,
         ALURESULT      => ALURESULT,
         MEM_ALUout     => MEM_ALUout,
         MEM_Control    => MEM_Control,
         Mem_nextPC     => Mem_nextPC,
         Mem_IR         => Mem_IR,
         Mem_CC         => Mem_CC,
         Ex_CC          => Ex_CC,
         EX_CONTROL     => EX_CONTROL,
         Ex_IR          => Ex_IR,
         Ex_NPC         => Ex_NPC,
         dest_regC      => dest_regC,
         Ex_dest_reg    => Ex_dest_reg,
         Branch_true    => Branch_true,
         Branch_true_EX => Branch_true_EX,
         EX_SRCA        => EX_SRCA,
         EX_SRCB        => EX_SRCB,
         MEM_SRCA       => MEM_SRCA,
         MEM_SRCB       => MEM_SRCB
      );
   ExecStage : Execute
      PORT MAP (
         EX_CONTROL  => EX_CONTROL,
         EX_SRCA     => EX_SRCA,
         EX_SRCB     => EX_SRCB,
         Ex_CC       => Ex_CC,
         Ex_IR       => Ex_IR,
         Ex_NPC      => Ex_NPC,
         Ex_dest_reg => Ex_dest_reg,
         Mem_CC      => Mem_CC,
         RESET_L     => RESET_L,
         clk         => clk,
         ALURESULT   => ALURESULT,
         Branch_true => Branch_true
      );
   RegB : ID_EX
      PORT MAP (
         RESET_L      => RESET_L,
         clk          => clk,
         Control      => Control,
         ID_CC        => ID_CC,
         ID_IR        => ID_IR,
         ID_srcB_regB => ID_srcB_regB,
         ID_srcA_regB => ID_srcA_regB,
         Ex_CC        => Ex_CC,
         Ex_IR        => Ex_IR,
         Ex_NPC       => Ex_NPC,
         EX_SRCA      => EX_SRCA,
         EX_SRCB      => EX_SRCB,
         Set_regB     => Set_regB,
         Ex_dest_reg  => Ex_dest_reg,
         regA_pc_out  => regA_pc_out,
         ID_dest_reg  => ID_dest_reg,
         EX_CONTROL   => EX_CONTROL
      );
   RegA : IF_ID
      PORT MAP (
         PCPlus2out   => PCPlus2out,
         RESET_L      => RESET_L,
         clk          => clk,
         ifetch_out   => ifetch_out,
         ifetch_ready => ifetch_ready,
         set_regA     => set_regA,
         IR           => IR,
         regA_pc_out  => regA_pc_out
      );
   IFetch : InstFetch
      PORT MAP (
         Branch_true_EX  => Branch_true_EX,
         Load_PC         => Load_PC,
         PCMuxSelect_Mem => PCMuxSelect_Mem,
         RESET_L         => RESET_L,
         TARGET_PC       => TARGET_PC,
         clk             => clk,
         ifetch_datain   => ifetch_datain,
         ifetch_mresp_h  => ifetch_mresp_h,
         PCPlus2out      => PCPlus2out,
         ifetch_address  => ifetch_address,
         ifetch_mread_l  => ifetch_mread_l,
         ifetch_out      => ifetch_out,
         ifetch_ready    => ifetch_ready
      );
   IDecode : InstrDecode
      PORT MAP (
         Control      => Control,
         IR           => IR,
         RESET_L      => RESET_L,
         Reg_DATAIN   => Reg_DATAIN,
         Set_cc       => Set_cc,
         WB_ALUout    => WB_ALUout,
         clk          => clk,
         dest_reg     => dest_reg,
         set_regfile  => set_regfile,
         ID_CC        => ID_CC,
         ID_IR        => ID_IR,
         ID_dest_reg  => ID_dest_reg,
         ID_srcA_regB => ID_srcA_regB,
         ID_srcB_regB => ID_srcB_regB,
         Opcode       => Opcode
      );
   REGD : MEM_WB
      PORT MAP (
         RESET_L         => RESET_L,
         clk             => clk,
         Mem_ALU_Out     => Mem_ALU_Out,
         Mem_Control_out => Mem_Control_out,
         Mem_IR_Out      => Mem_IR_Out,
         set_regD        => set_regD,
         WB_Control      => WB_Control,
         WB_IR           => WB_IR,
         WB_NextPC       => WB_NextPC,
         WB_ALUout       => WB_ALUout,
         dest_regD       => dest_regD,
         dest_regC       => dest_regC,
         Mem_Address     => Mem_Address,
         WB_MEMout       => WB_MEMout,
         Mem_dataout     => Mem_dataout
      );
   MemStage : MemoryStage
      PORT MAP (
         DATA_DATAIN     => DATA_DATAIN,
         DATA_MRESP_H    => DATA_MRESP_H,
         MEM_ALUout      => MEM_ALUout,
         MEM_Control     => MEM_Control,
         MEM_SRCA        => MEM_SRCA,
         MEM_SRCB        => MEM_SRCB,
         Mem_CC          => Mem_CC,
         Mem_IR          => Mem_IR,
         Mem_nextPC      => Mem_nextPC,
         RESET_L         => RESET_L,
         clk             => clk,
         DATA_ADDRESS    => DATA_ADDRESS,
         DATA_DATAOUT    => DATA_DATAOUT,
         DATA_MREAD_L    => DATA_MREAD_L,
         DATA_MWRITEH_L  => DATA_MWRITEH_L,
         DATA_MWRITEL_L  => DATA_MWRITEL_L,
         MEM_NEXTPC_OUT  => MEM_NEXTPC_OUT,
         Mem_ALU_Out     => Mem_ALU_Out,
         Mem_Address     => Mem_Address,
         Mem_CC_out      => Mem_CC_out,
         Mem_Control_out => Mem_Control_out,
         Mem_IR_Out      => Mem_IR_Out,
         Mem_dataout     => Mem_dataout,
         PCMuxSelect_Mem => PCMuxSelect_Mem,
         TARGET_PC       => TARGET_PC
      );
   StallerBaller : StallingUnit
      PORT MAP (
         RESET_L        => RESET_L,
         clk            => clk,
         ifetch_mresp_h => ifetch_mresp_h,
         Load_PC        => Load_PC,
         Set_regB       => Set_regB,
         set_regA       => set_regA,
         set_regC       => set_regC,
         set_regD       => set_regD
      );
   WBStage : WriteBack
      PORT MAP (
         RESET_L     => RESET_L,
         WB_ALUout   => WB_ALUout,
         WB_Control  => WB_Control,
         WB_IR       => WB_IR,
         WB_MEMout   => WB_MEMout,
         WB_NextPC   => WB_NextPC,
         clk         => clk,
         dest_regD   => dest_regD,
         Cond_Code   => Cond_Code,
         Reg_DATAIN  => Reg_DATAIN,
         Set_cc      => Set_cc,
         dest_reg    => dest_reg,
         set_regfile => set_regfile
      );

END struct;
